package mocks

import (
	model "middleware/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *ProductRepository) CreateProduct(product model.Product) (*model.Product, error) {
	ret := _m.Called(product)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Product) (*model.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(model.Product) *model.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: product
func (_m *ProductRepository) DeleteProduct(product model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProduct provides a mock function with given fields: productID
func (_m *ProductRepository) FindProduct(productID string) (*model.Product, error) {
	ret := _m.Called(productID)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Product, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProduct provides a mock function with given fields:
func (_m *ProductRepository) GetAllProduct() ([]model.Product, error) {
	ret := _m.Called()

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *ProductRepository) GetByUserID(userID string) ([]model.Product, error) {
	ret := _m.Called(userID)

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Product, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Product); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: product
func (_m *ProductRepository) UpdateProduct(product model.Product) (model.Product, error) {
	ret := _m.Called(product)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Product) (model.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(model.Product) model.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(model.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
